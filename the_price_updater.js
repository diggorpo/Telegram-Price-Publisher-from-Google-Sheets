
/**
 * =================================================================
 * –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
 * –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –∑–¥–µ—Å—å.
 * =================================================================
 */
const CONFIG = {
    // --- Telegram ---
    TG_BOT_TOKEN: scriptProperties.getProperty('TELEGRAM_BOT_TOKEN'),
    TG_CHAT_ID: scriptProperties.getProperty('PRICES_CHAT_TG'), // ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '@mychannel' –∏–ª–∏ '-1001234567890')
    
    // --- –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤ ---
    // --- –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤ ---
    SHEET_NAMES: {
      PRODUCTS: "–ú–æ–Ω–∏—Ç–æ—Ä —Ü–µ–Ω", // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ª–∏—Å—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
      DIRECTORY: "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ—Å—Ç–æ–≤", // –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è ID —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
      SETTINGS: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¢–ì" // –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è ID –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (—Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    },
  
    // --- –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ) ---
    COLUMN_NAMES: {
      // –õ–∏—Å—Ç "–¢–æ–≤–∞—Ä—ã"
      GROUP: "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–¥–ª—è –ø–æ—Å—Ç–∞)",
      CATEGORY: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–≥", // –î–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø–æ—Å—Ç–∞
      FLAG: "–§–ª–∞–≥–∏",
      NAME: "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
      PRICE: "–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏ —Å–µ–≥–æ–¥–Ω—è",
  
      // –õ–∏—Å—Ç "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ—Å—Ç–æ–≤"
      DIR_GROUP: "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
      DIR_MESSAGE_ID: "message_id",
      DIR_STATUS: "–°—Ç–∞—Ç—É—Å"
    },
  
    // --- –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π ---
    MESSAGE_TEMPLATES: {
      HEADER: `<b>{groupName}</b>\n\nüóìÔ∏è –î–∞—Ç–∞: ${Utilities.formatDate(new Date(), "GMT+3", "dd.MM.yyyy")}\n\n`,
      FOOTER: "\n<b><i>‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ, –∑–∞–ø–µ—á–∞—Ç–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.</i></b>\n\nüí¨ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º Telegram: @leon_leman",
      OUT_OF_STOCK: `<b>{groupName}</b>\n\nüóìÔ∏è –î–∞—Ç–∞: ${Utilities.formatDate(new Date(), "GMT+3", "dd.MM.yyyy")}\n\n–¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã.`,
      NAV_HEADER: `<b>LEMAN IMPORT | –ù–ê–í–ò–ì–ê–¶–ò–Ø</b>\n\nüóìÔ∏è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –∞–∫—Ç—É–∞–ª–µ–Ω –Ω–∞ ${Utilities.formatDate(new Date(), "GMT+3", "dd.MM.yyyy")}\n\nüëá –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`
    },
    
    // --- –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è ---
    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∑–∞–≥–ª—É—à–∫—É "–¢–æ–≤–∞—Ä —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω" –¥–ª—è –ø–æ—Å—Ç–æ–≤, –≥–¥–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.
    // true - –¥–∞, –ø–æ—Å—Ç –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –∑–∞–≥–ª—É—à–∫—É.
    // false - –Ω–µ—Ç, –ø–æ—Å—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è (–Ω–æ –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –∏—Å—á–µ–∑–Ω–µ—Ç).
    SHOW_OUT_OF_STOCK_PLACEHOLDERS: false, 
    SHOW_ITEMS_WITHOUT_PRICE: false,
    // --- –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
    PRICE_MARKUP: 5500,
    PRICE_MARKUP_THRESHOLD: 20000,
    PRICE_MARKUP_LOW: 2000
  };
  
  // --- –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API Telegram ---
  const TG_BASE_URL = `https://api.telegram.org/bot${CONFIG.TG_BOT_TOKEN}/`;
  
  /**
   * =================================================================
   * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –û–†–ö–ï–°–¢–†–ê–¢–û–† (–û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–ê–Ø –í–ï–†–°–ò–Ø)
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
   * =================================================================
   */
  function runPriceUpdater() {
    const scriptProperties = PropertiesService.getScriptProperties();
    const lock = scriptProperties.getProperty('SCRIPT_STATUS_TG_UPDATE');
  
    if (lock === 'RUNNING') {
      console.warn("--- [–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞, –ø–æ–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. ---");
      return;
    }
  
    try {
      scriptProperties.setProperty('SCRIPT_STATUS', 'RUNNING');
      console.info("--- [–ù–ê–ß–ê–õ–û] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ ---");
  
      const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
      
      initializeSystemSheets(spreadsheet);
      processProductPosts(spreadsheet);
      processNavigationPost(spreadsheet);
  
      console.info("--- [–£–°–ü–ï–•] –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. ---");
    
    } catch (e) {
      console.error(`--- [–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: ${e.toString()} \n–°—Ç–µ–∫: ${e.stack} ---`);
    
    } finally {
      scriptProperties.setProperty('SCRIPT_STATUS', 'IDLE');
      console.info("--- [–ó–ê–í–ï–†–®–ï–ù–ò–ï] –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞. ---");
    }
  }
  
  /**
   * =================================================================
   * –ë–õ–û–ö 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –£–¢–ò–õ–ò–¢–´
   * =================================================================
   */
  
  function initializeSystemSheets(spreadsheet) {
    console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤...");
    getOrCreateSheet(
      spreadsheet,
      CONFIG.SHEET_NAMES.DIRECTORY, [CONFIG.COLUMN_NAMES.DIR_GROUP, CONFIG.COLUMN_NAMES.DIR_MESSAGE_ID, CONFIG.COLUMN_NAMES.DIR_STATUS]
    );
    getOrCreateSheet(
      spreadsheet,
      CONFIG.SHEET_NAMES.SETTINGS, ["–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
    );
    console.log("–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã.");
  }
  
  function getOrCreateSheet(ss, sheetName, headers) {
    const MAX_RETRIES = 3;
    const RETRY_DELAY = 2000;
  
    for (let i = 0; i < MAX_RETRIES; i++) {
      try {
        let sheet = ss.getSheetByName(sheetName);
        if (!sheet) {
          sheet = ss.insertSheet(sheetName);
          console.warn(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.`);
          if (headers && headers.length > 0) {
            sheet.getRange(1, 1, 1, headers.length).setValues([headers]).setFontWeight("bold");
          }
        }
        return sheet;
      } catch (e) {
        if (e.message.includes('timed out')) {
          console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –∏–∑ ${MAX_RETRIES}: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –ª–∏—Å—Ç—É "${sheetName}". –ü–æ–≤—Ç–æ—Ä...`);
          if (i < MAX_RETRIES - 1) {
            Utilities.sleep(RETRY_DELAY);
          } else {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–∏—Å—Ç—É "${sheetName}" –ø–æ—Å–ª–µ ${MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫.`);
            throw e;
          }
        } else {
          throw e;
        }
      }
    }
  }
  
  function appendRowWithRetry(sheet, rowData) {
      const MAX_RETRIES = 3;
      const RETRY_DELAY = 2000;
      for (let i = 0; i < MAX_RETRIES; i++) {
          try {
              sheet.appendRow(rowData);
              return;
          } catch (e) {
              if (e.message.includes('timed out')) {
                  console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –∏–∑ ${MAX_RETRIES}: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç "${sheet.getName()}". –ü–æ–≤—Ç–æ—Ä...`);
                  if (i < MAX_RETRIES - 1) Utilities.sleep(RETRY_DELAY);
                  else throw e;
              } else {
                  throw e;
              }
          }
      }
  }
  
  function getColumnIndexMap(headers) {
    const map = {};
    headers.forEach((header, index) => { map[header] = index; });
    return map;
  }
  
  /**
   * =================================================================
   * –ë–õ–û–ö 2: –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê - –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–°–¢–û–í
   * =================================================================
   */
  
  function processProductPosts(spreadsheet) {
    console.log("--- –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ ---");
  
    const productSheet = spreadsheet.getSheetByName(CONFIG.SHEET_NAMES.PRODUCTS);
    const directorySheet = spreadsheet.getSheetByName(CONFIG.SHEET_NAMES.DIRECTORY);
  
    if (!productSheet) throw new Error(`–õ–∏—Å—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏ "${CONFIG.SHEET_NAMES.PRODUCTS}" –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
  
    const productDataRaw = productSheet.getDataRange().getValues();
    const directoryData = directorySheet.getDataRange().getValues();
  
    const productHeaders = productDataRaw.shift(); // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    
    // =================================================================
    // –ù–û–í–´–ô –ë–õ–û–ö: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    // =================================================================
    const requiredColumns = [
      CONFIG.COLUMN_NAMES.GROUP,
      CONFIG.COLUMN_NAMES.CATEGORY,
      CONFIG.COLUMN_NAMES.NAME,
      CONFIG.COLUMN_NAMES.PRICE
    ];
  
    const missingColumns = requiredColumns.filter(colName => !productHeaders.includes(colName));
  
    if (missingColumns.length > 0) {
      const errorMessage = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –í –ª–∏—Å—Ç–µ "${CONFIG.SHEET_NAMES.PRODUCTS}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: [${missingColumns.join(', ')}]. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç.`;
      console.error(errorMessage);
      throw new Error(errorMessage); // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }
    console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
    // =================================================================
    // –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    // =================================================================
  
    const productColMap = getColumnIndexMap(productHeaders);
    const directoryHeaders = directoryData.shift() || [];
    const directoryColMap = getColumnIndexMap(directoryHeaders);
  
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    const colGroupIndex = productColMap[CONFIG.COLUMN_NAMES.GROUP];
    const colCategoryIndex = productColMap[CONFIG.COLUMN_NAMES.CATEGORY];
    const productData = productDataRaw.filter(row => row[colGroupIndex]);
  
    
    if (productDataRaw.length !== productData.length) {
      console.warn(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${productDataRaw.length - productData.length} —Å—Ç—Ä–æ–∫ –±–µ–∑ –ù–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏.`);
    }
  
    // 1. –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤
    const activeProductGroups = new Set(productData.map(row => row[colGroupIndex]));
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${activeProductGroups.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤.`);
  
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
    let hasStatusChanges = false;
    const directoryMap = new Map();
    directoryData.forEach((row, index) => {
      const groupName = row[directoryColMap[CONFIG.COLUMN_NAMES.DIR_GROUP]];
      const currentStatus = row[directoryColMap[CONFIG.COLUMN_NAMES.DIR_STATUS]];
      const newStatus = activeProductGroups.has(groupName) ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω";
  
      if (currentStatus !== newStatus) {
        row[directoryColMap[CONFIG.COLUMN_NAMES.DIR_STATUS]] = newStatus;
        hasStatusChanges = true;
      }
      directoryMap.set(groupName, {
        messageId: row[directoryColMap[CONFIG.COLUMN_NAMES.DIR_MESSAGE_ID]],
        status: newStatus,
        rowIndex: index + 2
      });
    });
  
    if (hasStatusChanges && directoryData.length > 0) {
      directorySheet.getRange(2, 1, directoryData.length, directoryHeaders.length).setValues(directoryData);
      console.log("–°—Ç–∞—Ç—É—Å—ã –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
    }
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –≤ Telegram
    directoryMap.forEach((data, groupName) => {
      const messageId = data.messageId;
      if (data.status === "–ê–∫—Ç–∏–≤–µ–Ω") {
        const groupProducts = productData.filter(row => row[colGroupIndex] === groupName);
        const messageText = formatProductPost(groupProducts, productColMap, groupName);
        editTelegramMessage(CONFIG.TG_CHAT_ID, messageId, messageText);
      } else {
        if (CONFIG.SHOW_OUT_OF_STOCK_PLACEHOLDERS) {
          const messageText = CONFIG.MESSAGE_TEMPLATES.OUT_OF_STOCK.replace('{groupName}', groupName);
          editTelegramMessage(CONFIG.TG_CHAT_ID, messageId, messageText);
          console.log(`–ì—Ä—É–ø–ø–∞ "${groupName}" –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü–æ—Å—Ç ${messageId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∑–∞–≥–ª—É—à–∫—É.`);
        } else {
          console.log(`–ì—Ä—É–ø–ø–∞ "${groupName}" –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü–æ—Å—Ç ${messageId} –ø—Ä–æ–ø—É—â–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.`);
        }
      }
    });
  
    // 4. –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø
    activeProductGroups.forEach(groupName => {
      if (!directoryMap.has(groupName)) {
        console.warn(`–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ "${groupName}". –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞...`);
        const groupProducts = productData.filter(row => row[colGroupIndex] === groupName);
        const messageText = formatProductPost(groupProducts, productColMap, groupName);
        
        const newPostResponse = sendTelegramMessage2(CONFIG.TG_CHAT_ID, messageText);
        if (newPostResponse && newPostResponse.ok) {
          const newMessageId = newPostResponse.result.message_id;
          console.log(`–ù–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã "${groupName}" —Å–æ–∑–¥–∞–Ω —Å message_id: ${newMessageId}.`);
          appendRowWithRetry(directorySheet, [groupName, newMessageId, "–ê–∫—Ç–∏–≤–µ–Ω"]);
        }
      }
    });
  
    console.log("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---");
  }
  
  function processNavigationPost(spreadsheet=SpreadsheetApp.getActiveSpreadsheet()) {
      console.log("--- –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º) ---");
     
      const settingsSheet = spreadsheet.getSheetByName(CONFIG.SHEET_NAMES.SETTINGS);
      const directorySheet = spreadsheet.getSheetByName(CONFIG.SHEET_NAMES.DIRECTORY);
      
      const directoryData = directorySheet.getDataRange().getValues();
      const directoryHeaders = directoryData.shift() || [];
      const directoryColMap = getColumnIndexMap(directoryHeaders);
      
      const activePosts = directoryData
        .filter(row => row[directoryColMap[CONFIG.COLUMN_NAMES.DIR_STATUS]] === "–ê–∫—Ç–∏–≤–µ–Ω")
        .map(row => ({
            groupName: row[directoryColMap[CONFIG.COLUMN_NAMES.DIR_GROUP]],
            messageId: row[directoryColMap[CONFIG.COLUMN_NAMES.DIR_MESSAGE_ID]]
        }))
        // =================================================================
        // –í–û–¢ –≠–¢–û –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã
        // =================================================================
        .sort((a, b) => a.groupName.localeCompare(b.groupName));
        // =================================================================
  
      if (activePosts.length === 0) {
          console.warn("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥.");
          // –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç, –Ω—É–∂–Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Å—Ç
          const oldNavMessageId = getSetting(settingsSheet, "nav_message_id");
          if (oldNavMessageId) {
              console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å ID: ${oldNavMessageId}...`);
              unpinTelegramMessage(CONFIG.TG_CHAT_ID, oldNavMessageId);
              deleteTelegramMessage(CONFIG.TG_CHAT_ID, oldNavMessageId);
              setSetting(settingsSheet, "nav_message_id", null); // –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
          }
          return;
      }
  
      const { text, reply_markup } = formatNavigationPost(activePosts);
      const newPostResponse = sendTelegramMessage2(CONFIG.TG_CHAT_ID, text, reply_markup);
      
      if (!newPostResponse || !newPostResponse.ok) {
          console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Å—Ç. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
          return;
      }
  
      const newNavMessageId = newPostResponse.result.message_id;
      console.log(`–ù–æ–≤—ã–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: ${newNavMessageId}.`);
      
      const pinResponse = pinTelegramMessage(CONFIG.TG_CHAT_ID, newNavMessageId);
      if (!pinResponse || !pinResponse.ok) {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç ${newNavMessageId}. –°—Ç–∞—Ä—ã–π –ø–æ—Å—Ç –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.`);
          setSetting(settingsSheet, "nav_message_id", newNavMessageId);
          return;
      }
  
      console.log(`–ü–æ—Å—Ç ${newNavMessageId} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω.`);
      
      const oldNavMessageId = getSetting(settingsSheet, "nav_message_id");
      if (oldNavMessageId && oldNavMessageId != newNavMessageId) {
          console.log(`–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å ID: ${oldNavMessageId}...`);
          unpinTelegramMessage(CONFIG.TG_CHAT_ID, oldNavMessageId);
          deleteTelegramMessage(CONFIG.TG_CHAT_ID, oldNavMessageId);
      }
      
      setSetting(settingsSheet, "nav_message_id", newNavMessageId);
      console.log(`ID –Ω–æ–≤–æ–≥–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (${newNavMessageId}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`);
      console.log("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---");
  }
  /**
   * =================================================================
   * –ë–õ–û–ö 3: –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
   * =================================================================
   */
  
  function formatProductPost(rows, colMap, groupName) {
    let messageText = CONFIG.MESSAGE_TEMPLATES.HEADER.replace('{groupName}', groupName);
    const colPriceIndex = colMap[CONFIG.COLUMN_NAMES.PRICE];
    
    const groupedByCategory = {};
    rows.forEach(row => {
      const category = row[colMap[CONFIG.COLUMN_NAMES.CATEGORY]] || "–ü—Ä–æ—á–µ–µ";
      if (!groupedByCategory[category]) {
        groupedByCategory[category] = [];
      }
      groupedByCategory[category].push(row);
    });
  
    for (const category in groupedByCategory) {
      let itemsInCategory = groupedByCategory[category];
      
      // –ò–ó–ú–ï–ù–ï–ù–ò–ï: 1. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω—ã, –µ—Å–ª–∏ —Ñ–ª–∞–≥ SHOW_ITEMS_WITHOUT_PRICE —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ false
      if (CONFIG.SHOW_ITEMS_WITHOUT_PRICE === false) {
        itemsInCategory = itemsInCategory.filter(row => {
          const price = parseInt(row[colPriceIndex], 10);
          return !isNaN(price); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Ü–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        });
      }
  
      // –ò–ó–ú–ï–ù–ï–ù–ò–ï: 2. –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–µ
      if (itemsInCategory.length === 0) {
        continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      }
  
      messageText += `\n<b>${category}</b>\n`;
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ
      itemsInCategory.sort((a, b) => {
        const priceA = parseInt(a[colPriceIndex], 10);
        const priceB = parseInt(b[colPriceIndex], 10);
        if (isNaN(priceA)) return 1;
        if (isNaN(priceB)) return -1;
        return priceA - priceB;
      });
      
      itemsInCategory.forEach(row => {
        const name = row[colMap[CONFIG.COLUMN_NAMES.NAME]];
        const rawPrice = parseInt(row[colPriceIndex], 10);
        let finalPrice = rawPrice;
  
        if (!isNaN(rawPrice)) {
          if (rawPrice <= CONFIG.PRICE_MARKUP_THRESHOLD) {
            finalPrice = rawPrice + CONFIG.PRICE_MARKUP_LOW;
          } else {
            finalPrice = rawPrice + CONFIG.PRICE_MARKUP;
          }
          finalPrice = Math.ceil(finalPrice / 500) * 500;
        }
        
        const formattedPrice = isNaN(finalPrice) ? '–ø–æ –∑–∞–ø—Ä–æ—Å—É' : `${finalPrice.toLocaleString('ru-RU')}‚ÇΩ`;
        const flag = row[colMap[CONFIG.COLUMN_NAMES.FLAG]] || "";
        
        messageText += `${flag} ${name} ‚Äì ${formattedPrice}\n`;
      });
    }
  
    messageText += CONFIG.MESSAGE_TEMPLATES.FOOTER;
    return messageText;
  }
  
  function formatNavigationPost(activePosts) {
    const text = CONFIG.MESSAGE_TEMPLATES.NAV_HEADER;
    const buttons = activePosts.map(post => {
      const chatIdNum = CONFIG.TG_CHAT_ID.toString().startsWith('-100') 
          ? CONFIG.TG_CHAT_ID.toString().substring(4) 
          : CONFIG.TG_CHAT_ID.replace('@', '');
      const url = `https://t.me/${chatIdNum}/${post.messageId}`;
      return [{ text: post.groupName, url: url }];
    });
  
    return { text: text, reply_markup: { inline_keyboard: buttons } };
  }
  
  
  /**
   * =================================================================
   * –ë–õ–û–ö 4: –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° API TELEGRAM (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
   * =================================================================
   */
  
  function apiRequest(method, payload) {
    const MAX_RETRIES = 5;
    for (let i = 0; i < MAX_RETRIES; i++) {
      const options = { 'method': 'post', 'contentType': 'application/json', 'payload': JSON.stringify(payload), 'muteHttpExceptions': true };
      try {
        const response = UrlFetchApp.fetch(TG_BASE_URL + method, options);
        const responseData = JSON.parse(response.getContentText());
        if (responseData.ok === false && responseData.description.includes('Too Many Requests')) {
          const matches = responseData.description.match(/retry after (\d+)/);
          if (matches && matches[1]) {
            const waitSeconds = parseInt(matches[1], 10);
            console.warn(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ ${waitSeconds} —Å–µ–∫. –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –∏–∑ ${MAX_RETRIES}...`);
            Utilities.sleep((waitSeconds + 1) * 1000);
            continue;
          }
        }
        if (responseData.ok === false) {
          console.error(`–û—à–∏–±–∫–∞ API Telegram –≤ –º–µ—Ç–æ–¥–µ ${method}: ${responseData.description}. Payload: ${JSON.stringify(payload)}`);
        }
        return responseData;
      } catch (e) {
        console.error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ ${method}: ${e.toString()}`);
        return null;
      }
    }
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –º–µ—Ç–æ–¥—É ${method} –ø–æ—Å–ª–µ ${MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫.`);
    return null;
  }
  
  function sendTelegramMessage2(chatId, text, reply_markup = null) {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}...`);
    const payload = { chat_id: chatId, text: text, parse_mode: 'HTML' };
    if (reply_markup) payload.reply_markup = reply_markup;
    return apiRequest('sendMessage', payload);
  }
  
  function editTelegramMessage(chatId, messageId, text) {
    console.log(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –≤ —á–∞—Ç–µ ${chatId}...`);
    return apiRequest('editMessageText', { chat_id: chatId, message_id: messageId, text: text, parse_mode: 'HTML' });
  }
  
  function deleteTelegramMessage(chatId, messageId) {
    console.log(`–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –∏–∑ —á–∞—Ç–∞ ${chatId}...`);
    return apiRequest('deleteMessage', { chat_id: chatId, message_id: messageId });
  }
  
  function pinTelegramMessage(chatId, messageId) {
    console.log(`–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –≤ —á–∞—Ç–µ ${chatId}...`);
    return apiRequest('pinChatMessage', { chat_id: chatId, message_id: messageId, disable_notification: true });
  }
  
  function unpinTelegramMessage(chatId, messageId) {
    console.log(`–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –∏–∑ —á–∞—Ç–∞ ${chatId}...`);
    return apiRequest('unpinChatMessage', { chat_id: chatId, message_id: messageId });
  }
  
  /**
   * =================================================================
   * –ë–õ–û–ö 5: –†–ê–ë–û–¢–ê –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò
   * =================================================================
   */
   
  function getSetting(settingsSheet, key) {
      const data = settingsSheet.getRange("A:B").getValues();
      for (let i = 0; i < data.length; i++) {
          if (data[i][0] === key) return data[i][1];
      }
      return null;
  }
  
  function setSetting(settingsSheet, key, value) {
      const data = settingsSheet.getRange("A:B").getValues();
      let found = false;
      for (let i = 0; i < data.length; i++) {
          if (data[i][0] === key) {
              settingsSheet.getRange(i + 1, 2).setValue(value);
              found = true;
              break;
          }
      }
      if (!found) settingsSheet.appendRow([key, value]);
  }